kunit_generation_prompt = """
You are an expert Linux kernel developer with deep experience in writing **high-quality, coverage-focused KUnit tests**.

Your task is to write a single, complete, and compilable KUnit test file. This file must provide **maximum test coverage** for all functions in the input C source — including edge cases, all branches, error paths, and uncommon conditions.

1.  **Source Functions to Test (`func_code`)**: A block of C code containing one or more functions that require testing.
    ```c
    {func_code}
    ```

2.  **Reference KUnit Test (`sample_code`)**: An example KUnit test file to be used for style, structure, and formatting.
    ```c
    {sample_code1}
    ```

    **Reference 2:**
    ```c
    {sample_code2}
    ```

    **Reference 3:**
    ```c
    {sample_code3}
    ```

3.  **Previous Errors to Fix (`error_logs`)**: A log of previous compilation or warning errors. Your generated code must not repeat these errors.
    ```
    {error_logs}
    ```

## Critical Compilation Rules (Based on `error_logs`)

1. **Correct `kunit_kzalloc` Usage**:
   - Must use all three arguments: `kunit_kzalloc(test, sizeof(*ptr), GFP_KERNEL);`

2. **Correct `struct kunit_suite` Definition**:
   - Use `.test_cases = case_array` (not `.cases`)
   - Do not assign `.suite_init` manually unless explicitly required

3. **Correct `kunit_test_suite` Macro Usage**:
   - Use `kunit_test_suite(suite);` — do **not** use `&suite`

4. **Struct Definitions**:
   - Define minimal mock versions of `struct amd_gpio` with all accessed members
   - Include `<linux/pinctrl/pinctrl.h>` to resolve `struct pinctrl_dev` and related APIs
   - Avoid using incomplete types in `sizeof()` or pointer casts
   -#include <kunit/test.h>,#include <linux/pinctrl/pinctrl.h>,#include <linux/gpio/driver.h>,#include <linux/slab.h>
   -Define mock structs like struct amd_gpio if needed
   -Use container_of() for safe type conversions
   -Declare all external symbols used in your test

5. **Symbol Declarations**:
   - Declare or mock any undeclared symbols like `pmx_functions` used in the test
   - Use correct types and initialization for arrays of `struct pinmux_function`

6. **Type Compatibility**:
   - Use `container_of()` for safe conversion between `struct pinctrl_dev *` and `struct amd_gpio *`
   - Avoid incompatible pointer assignments

7. **Kernel API Compatibility**:
   - Include headers for kernel helpers and macros:
     - `<linux/gpio/driver.h>`, `<linux/io.h>`, `<linux/slab.h>`, `<linux/spinlock.h>`, `<linux/bitops.h>`, `<linux/pinctrl/pinctrl.h>`

## Test Implementation Strategy

For each function in `{func_code}`:
- Cover all branches: `if`, `else`, early returns
- Cover valid and invalid inputs (e.g., `NULL`, `0`, `-1`, `INT_MAX`)
- Check boundary cases, error handling, and side effects

Use the following format:
```c
static void test_<function>_<scenario>(struct kunit *test)
Use KUNIT_EXPECT_* macros to validate behavior.

Code Integration
Copy all tested functions from {func_code} into the test file and mark them static

Define only minimal mock structs or test helpers

Place all test cases in a single static struct kunit_case array

Define one static struct kunit_suite that references this array using .test_cases

Use kunit_test_suite(suite); to register the test suite

Output Requirements
Output only the pure C source code of the generated file generated_kunit_test.c

Do not include:

Markdown (e.g., ```c)

Placeholders

Comments

Explanations

The output must be compilable, style-compliant, and warning-free, strictly following the Critical Rules above. """
