kunit_generation_prompt="""
You are an expert Linux kernel developer with deep experience in writing **high-quality, coverage-focused KUnit tests**.

Your task is to write a single, complete, and compilable KUnit test file . This file must provide **maximum test coverage** for all functions in the input C source — including edge cases, all branches, error paths, and uncommon conditions.

1.  **Source Functions to Test (`func_code`)**: A block of C code containing one or more functions that require testing.
    ```c
    {func_code}
    ```

2.  **Reference KUnit Test (`sample_code`)**: An example KUnit test file to be used for style, structure, and formatting.
    ```c
    {sample_code1}
    ```

    **Reference 2:**
    ```c
    {sample_code2}
    ```

    **Reference 3:**
    ```c
    {sample_code3}
    ```

3.  **Previous Errors to Fix (`error_logs`)**: A log of previous compilation or warning errors. Your generated code must not repeat these errors.
    ```
    {error_logs}
    ```

## Critical Rules to Avoid Compilation Errors

Based on the `error_logs`, you **MUST** adhere to the following rules:

1.  **Correct `kunit_kzalloc` Usage**: When calling `kunit_kzalloc`, you **must** provide all three required arguments: `(struct kunit *test, size_t size, gfp_t gfp)`. The third argument, the memory allocation flag, should almost always be `GFP_KERNEL`.
    - **Incorrect**: `kunit_kzalloc(test, sizeof(*data))`
    - **Correct**: `kunit_kzalloc(test, sizeof(*data), GFP_KERNEL)`

2.  **Correct `kunit_suite` Structure**: The member name for the array of test cases within `struct kunit_suite` is `test_cases`, **not** `cases`.
    - **Incorrect**: `.cases = your_test_case_array,`
    - **Correct**: `.test_cases = your_test_case_array,`

3.  **Correct `kunit_test_suite` Macro Call**: The `kunit_test_suite()` macro takes the suite struct object directly, **not a pointer** to it.
    - **Incorrect**: `kunit_test_suite(&my_suite);`
    - **Correct**: `kunit_test_suite(my_suite);`


## Instructions

### 1. Analyze and Plan
- All test code must be in **one compilable C file**.
- Copy tested functions into the file and declare them `static`.
- Include all necessary headers:
  - `<linux/gpio/driver.h>` (for `struct gpio_chip`)
  - `<linux/io.h>` (for `readl`, `writel`)
  - `<linux/spinlock.h>`, `<linux/bitops.h>`, `<linux/slab.h>`, etc.

- Define minimal mock versions of private structs (e.g., `struct amd_gpio`) if needed.
### 2.Critical Compilation Rules
---
1. **`kunit_kzalloc`**
   - Must use 3 arguments: `kunit_kzalloc(test, sizeof(*ptr), GFP_KERNEL);`
2. **KUnit Suite Definitions**
   - Use `.test_cases = case_array` (not `.cases`)
   - Use `kunit_test_suite(suite);` (no `&suite`)
3. **Struct & Type Declarations**
   - Do not declare `struct xyz` in parameter lists if used elsewhere.
   - Fully define structs used in multiple places.
4. **Function Usage**
   - Include headers or define mocks for kernel helpers (e.g., `gpiochip_get_data()`).
   - Ensure types match kernel APIs exactly.
5. **Macros**
   - Include headers for macros like `BIT()`, `raw_spin_lock_irqsave()`, `readl()`, `writel()`.
6. **Timestamps**
   - Avoid issues from future-dated build artifacts like `.o.cmd`. Don’t include or reference them.
---
### 3. Implement KUnit Test Cases
TESTING STRATEGY

For each function in `{func_code}`:
- Cover all branches: `if`, `else`, early returns
- Cover valid and invalid inputs (e.g., `NULL`, `0`, `-1`, `INT_MAX`)
- Check boundary cases, error handling, and side effects
Use the following format:
```c
static void test_<function>_<scenario>(struct kunit *test)
```
Use KUNIT_EXPECT_* macros to validate behavior.
### 4. Code Integration
- Copy all tested functions from `{func_code}` into the test file and mark them `static` to make them directly callable.
- Define only **minimal mock structs** or test helpers. Avoid unused code and suppress `-Wunused-*` warnings.
### 5. Consolidation
- Place all test cases in a single `static struct kunit_case` array.
- Define one `static struct kunit_suite` that references this array using `.test_cases`.
- Use `kunit_test_suite()` to register the test suite.

## Output Requirements
- Output only the **pure C source code** of the generated file `generated_kunit_test.c`.
- Do **not** include:
  - Markdown (e.g., ```c)
  - Placeholders
  - Comments
  - Explanations
- The output must be **compilable**, **style-compliant**, and **warning-free**, strictly following the **Critical Rules** above.
"""
