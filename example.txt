import re
import subprocess

class KUnitTestGenerator:
    # ... (your existing __init__, _load_environment, _query_model, etc.)

    # ---------------- File Injection Helpers ----------------
    def _update_makefile(self, test_name: str):
        """Add the generated test .o entry to Makefile if missing."""
        makefile_path = self.base_dir / "Makefile"
        if not makefile_path.exists():
            raise FileNotFoundError(f"Makefile not found at {makefile_path}")

        makefile_text = makefile_path.read_text(encoding="utf-8")
        obj_line = f"obj-$(CONFIG_{test_name.upper()}) += {test_name}.o"

        if obj_line not in makefile_text:
            makefile_text += f"\n{obj_line}\n"
            makefile_path.write_text(makefile_text, encoding="utf-8")
            print(f"üß© Added '{obj_line}' to Makefile.")

    def _update_kconfig(self, test_name: str):
        """Add a config entry for the test in Kconfig if not present."""
        kconfig_path = self.base_dir / "Kconfig"
        if not kconfig_path.exists():
            raise FileNotFoundError(f"Kconfig not found at {kconfig_path}")

        kconfig_text = kconfig_path.read_text(encoding="utf-8")
        config_name = f"{test_name.upper()}"

        if config_name not in kconfig_text:
            new_entry = f"""
config {test_name.upper()}
    tristate "Enable {test_name} KUnit test"
    depends on KUNIT
    default n
"""
            kconfig_text += "\n" + new_entry
            kconfig_path.write_text(kconfig_text, encoding="utf-8")
            print(f"üß© Added config entry for '{test_name}' in Kconfig.")

    def _update_test_config(self, test_name: str):
        """Enable the new test in the custom config file (e.g., my_pinctrl.config)."""
        config_path = self.base_dir / "my_pinctrl.config"
        if not config_path.exists():
            raise FileNotFoundError(f"Config file not found: {config_path}")

        config_text = config_path.read_text(encoding="utf-8")
        config_line = f"CONFIG_{test_name.upper()}=y"

        if config_line not in config_text:
            config_text += f"\n{config_line}\n"
            config_path.write_text(config_text, encoding="utf-8")
            print(f"üß© Enabled '{config_line}' in my_pinctrl.config.")

    # ---------------- Kernel Build & Compilation ----------------
    def _compile_kunit_test(self, test_name: str) -> bool:
        """Run kernel kunit build for this test and return True if success."""
        print(f"‚öôÔ∏è  Building kernel KUnit test for '{test_name}'...")

        build_cmd = (
            f"./tools/testing/kunit/kunit.py run "
            f"--kunitconfig=my_pinctrl.config "
            f"--arch=x86_64 --raw_output > {self.error_log_file} 2>&1"
        )

        process = subprocess.run(build_cmd, shell=True)
        log_content = self.error_log_file.read_text(encoding="utf-8") if self.error_log_file.exists() else ""

        if "error:" in log_content.lower() or process.returncode != 0:
            print(f"‚ùå Compilation failed for {test_name}.")
            return False

        print(f"‚úÖ Compilation successful for {test_name}.")
        return True

    # ---------------- Main Generation with Kernel Integration ----------------
    def generate_test_for_function(self, func_file_path: Path):
        test_name = func_file_path.stem + "_kunit_test"
        print(f"\nüîπ Generating kernel-integrated test for {func_file_path.name}...")

        func_code = func_file_path.read_text(encoding="utf-8")
        context = self._load_context_files()
        out_file = self.output_dir / f"{test_name}.c"

        for attempt in range(1, self.max_retries + 1):
            print(f"Attempt {attempt}/{self.max_retries}...")

            final_prompt = self.prompt_template.format(func_code=func_code, **context)
            response_text = self._query_model(final_prompt)
            out_file.write_text(response_text, encoding="utf-8")

            # Update kernel build files dynamically
            self._update_makefile(test_name)
            self._update_kconfig(test_name)
            self._update_test_config(test_name)

            # Compile via kernel build
            if self._compile_kunit_test(test_name):
                print(f"‚úÖ Test '{test_name}' compiled successfully on attempt {attempt}.")
                break
            else:
                if self.error_log_file.exists():
                    context["error_logs"] = self.error_log_file.read_text(encoding="utf-8")
                    print("üîÅ Feeding kernel compilation errors back into model for regeneration...")
                if attempt == self.max_retries:
                    print(f"‚ùå Failed to build test '{test_name}' after {self.max_retries} attempts.")
