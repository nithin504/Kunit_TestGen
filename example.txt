kunit_generation_prompt = """
You are an expert Linux kernel developer with deep experience in writing **high-quality, coverage-focused KUnit tests**.

Your task is to write a single, complete, and compilable KUnit test file. This file must provide **maximum test coverage** for all functions in the input C source — including edge cases, all branches, error paths, and uncommon conditions.

1.  **Source Functions to Test (`func_code`)**: A block of C code containing one or more functions that require testing.
    ```c
    {func_code}
    ```

2.  **Reference KUnit Test (`sample_code`)**: An example KUnit test file to be used for style, structure, and formatting.
    ```c
    {sample_code1}
    ```

    **Reference 2:**
    ```c
    {sample_code2}
    ```

    **Reference 3:**
    ```c
    {sample_code3}
    ```

3.  **Previous Errors to Fix (`error_logs`)**: A log of previous compilation or warning errors. Your generated code must not repeat these errors.
    ```
    {error_logs}
    ```

## Critical Compilation Rules (Based on `error_logs`)

1. **Struct Definitions**
   - Define minimal mock versions of `struct amd_gpio` with all accessed members (e.g., `pdev`, `iomux_base`)
   - Include `<linux/pinctrl/pinctrl.h>` to resolve `struct pinctrl_dev`
   - Do not use `sizeof(struct pinctrl_dev)` unless the type is fully defined

2. **Pointer Compatibility**
   - Do not assign `struct pinctrl_dev *` to `struct amd_gpio *` directly
   - Use `container_of()` if `pinctrl_dev` is embedded in `amd_gpio`
   - Avoid incompatible pointer casts and initializations

3. **Symbol Declarations**
   - Declare or mock any undeclared symbols like `pmx_functions`
   - Use correct types and initialization for arrays of `struct pinmux_function`

4. **Memory Allocation**
   - Use `kunit_kzalloc(test, sizeof(*ptr), GFP_KERNEL)` with all three arguments
   - Do not allocate memory for incomplete types

5. **KUnit Suite Structure**
   - Use `.test_cases = case_array` (not `.cases`)
   - Use `kunit_test_suite(suite);` — do **not** use `&suite`

6. **Kernel API Compatibility**
   - Include headers for kernel helpers and macros:
     - `<linux/gpio/driver.h>`, `<linux/io.h>`, `<linux/slab.h>`, `<linux/spinlock.h>`, `<linux/bitops.h>`, `<linux/pinctrl/pinctrl.h>`, `<linux/platform_device.h>`

7. **Warnings**
   - Avoid unused variables like `dummy_pctldev`
   - Suppress `-Wunused-variable` by removing or using declared variables

## Test Implementation Strategy

    For each function in `{func_code}`:
    - Cover all branches: `if`, `else`, early returns
    - Cover valid and invalid inputs (e.g., `NULL`, `0`, `-1`, `INT_MAX`)
    - Check boundary cases, error handling, and side effects
    
    Use the following format:
    ```c
    static void test_<function>_<scenario>(struct kunit *test)

##Code Integration
    Copy all tested functions from {func_code} into the test file and mark them static
    
    Define only minimal mock structs or test helpers
    
    Place all test cases in a single static struct kunit_case array
    
    Define one static struct kunit_suite that references this array using .test_cases
    
    Use kunit_test_suite(suite); to register the test suite

##Output Requirements
    Output only the pure C source code of the generated file generated_kunit_test.c
    
    Do not include:
    
    Markdown (e.g., ```c)
    
    Placeholders
    
    Comments
    
    Explanations
    
    The output must be compilable, style-compliant, and warning-free, strictly following the Critical Rules above. """
