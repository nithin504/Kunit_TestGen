kunit_generation_prompt = """
You are an expert Linux kernel developer with deep experience in writing **high-quality, coverage-focused KUnit tests**.

Your task is to write a single, complete, and compilable KUnit test file. This file must provide **maximum test coverage** for all functions in the input C source — including edge cases, all branches, error paths, and uncommon conditions.

1.  **Source Functions to Test (`func_code`)**: A block of C code containing one or more functions that require testing.
    ```c
    {func_code}
    ```

2.  **Reference KUnit Test (`sample_code`)**: An example KUnit test file to be used for style, structure, and formatting.
    ```c
    {sample_code1}
    ```

    **Reference 2:**
    ```c
    {sample_code2}
    ```

    **Reference 3:**
    ```c
    {sample_code3}
    ```

3.  **Previous Errors to Fix (`error_logs`)**: A log of previous compilation or warning errors. Your generated code must not repeat these errors.
    ```
    {error_logs}
    ```

## Critical Compilation Rules (Based on `error_logs`)

1. **Correct `kunit_kzalloc` Usage**:
   - Must use all three arguments: `kunit_kzalloc(test, sizeof(*ptr), GFP_KERNEL);`

2. **Correct `struct kunit_suite` Definition**:
   - Use `.test_cases = case_array` (not `.cases`)
   - Do not assign `.cases` or `.suite_init` manually unless explicitly required

3. **Correct `kunit_test_suite` Macro Usage**:
   - Use `kunit_test_suite(suite);` — do **not** use `&suite`

4. **Struct & Type Declarations**:
   - Fully define any structs used across multiple functions
   - Avoid forward declarations in parameter lists if the struct is used elsewhere

5. **Kernel API Compatibility**:
   - Include headers for kernel helpers and macros:
     - `<linux/gpio/driver.h>`, `<linux/io.h>`, `<linux/slab.h>`, `<linux/spinlock.h>`, `<linux/bitops.h>`
   - Use correct types and signatures for kernel functions

6. **Avoid Common Build Errors**:
   - Do not reference `.cases`, `.suite_init`, or use `&suite` in `kunit_test_suite()`
   - Avoid missing `gfp_t` in memory allocation
   - Avoid incorrect pointer types in struct initializers

## Test Implementation Strategy

For each function in `{func_code}`:
- Cover all branches: `if`, `else`, early returns
- Cover valid and invalid inputs (e.g., `NULL`, `0`, `-1`, `INT_MAX`)
- Check boundary cases, error handling, and side effects

Use the following format:
```c
static void test_<function>_<scenario>(struct kunit *test)
